// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id String @id @default(cuid())

  name        String  @unique
  description String?

  Role Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id String @id @default(cuid())

  name        String  @unique
  description String?

  permissions Permission[]
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id String @id @default(cuid())

  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  country      String
  postalCode   String

  users User[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  FiscalInfos FiscalInfos[]
}

model Wallet {
  id String @id @default(cuid())

  balance Float   @default(0)
  active  Boolean @default(true)

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FiscalInfos {
  id String @id @default(cuid())

  businessName String
  fantasyName  String?
  document     String  @unique

  addressId String
  address   Address @relation(fields: [addressId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @id @default(cuid())

  name     String
  surname  String
  email    String  @unique
  phone    String  @unique
  password String
  document String  @unique
  token    String?

  walletId String
  wallet   Wallet @relation(fields: [walletId], references: [id])

  addressId String?
  address   Address? @relation(fields: [addressId], references: [id])

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  transfers Transfer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RegistrationCode {
  id String @id @default(cuid())

  email String @unique
  code  String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CustomerTypeEnum {
  INDIVIDUAL
  COMPANY
}

model Customer {
  id String @id @default(cuid())

  name     String
  surname  String
  email    String           @unique
  phone    String           @unique
  document String           @unique
  type     CustomerTypeEnum
  token    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TransferStatusEnum {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model Transfer {
  id String @id @default(cuid())

  transferStatus TransferStatusEnum

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
